todo:

X-architect queryform and support custom query -- fix static variable issue


near-term:


X-test basic table processing
X-add improved neo4j session start on toolbar (pretty?, how to do default config.json for params, support dataset name -- at least eventually)
X-add custom plugin (one that will test multi-table) and fix default
X-add pagination and expand panels for tables
X-add home page with default description
X-fix routing and menu
X-add qs for forms



X-flask server and router and config file

-flask handle authorization
-allow basic favorites
-flask handle analytics
-fix formatting for menu (get rid of grid and set to 100%); side-bar dark gray?
-download csv
-dataset settings can be saved but should be toggleable on query menu top level -- use tags and make available in query strings (maybe save in user settings)
-specialized tables
-refactor plugins so there is generic handling of querystring -- maybe one of those wrapper classes





-settings (allow default datasets and setting neo4j database user/password, etc)







-add more session defaults to settings widget

-fix outstanding control flow bugs
-re-run eslint
-add basic install readme
-get shinya to test
-"release"



-session/settings: probably set default dataset in settings, neo4j probably implicit, maybe color schemes?
-google auth, then somehow call resource https to get neo4j information being configured


architecture/refactor:

-just pass plugins as props directly to Query and Query Form (but don't remove until other redux stuff is added)
-fix routing issues (at least basic stuff) -- drawer vs menu vs homepage (might move some of this to future work)
-could add custom components for <neuron> <synapse> etc to allow relevant formatting
-enable minimal interface for neu3

prettiness:

-make top bar look nicer
-make sure works on mobile browser








-implement jquery for neo4j
-make result widget and connect with redux
-table to display results
-need server address add -- user name and password as well
-commit








-make shell for js stuff (table viewer, some redux state, selector widget, base class for forms, simple sample query form plugin)
    -Analyzer React (top-level page, contains query and results)
    -Results (results) React (for handling >=1 tables and click expand and pagination, export to CSV)
    -Table React (for individual table with pagination, export to CSV)
    -Query widget (parent widget for query list and query form)
    -QueryList (contains list of all queries/plugins) -- will cause form pop up
    -QueryForm (generic base class for handling queries, allow query to be downloaded, loading data that will be subscribed by top level that will spawn a results, show query made)
    -Specific Query Form (plugins) -- maybe eventually just a schema that is loaded at runtime so that new queries can be produced 
    -Custom query box
    -helper functions to help build form boxes
    -redux stuff to manage queries and query state

-make multi-table query that requires pagination (or lower pagination threshold artificially) -- test output table and pagination, multi table (click to expand), pagination for a lot of tables

-try to make plugin very simple and decoupled from the rest of the js (maybe allow creation from a schema?)

-modify ppt to explicitly list all denormalizations encoded

-add query string to URL and re-execute query (form fields and query type) -- top-level query should initialize to null or whatever is in the url; can parse tables and sorts as well

-add documentation and graph model picture to help documentation; provide graph picture for each query so people know what is going on -- probably use router

why unique (compared to connectomeexplorer and catmaid):

-ROIs are first class citizens -- ROIs are already known, should be in data model
-very simple graph model, more intuitive -- no sql junk and no special algebra
-emphasis on graph queries especially given approximate connectome stuff
-special handling of uncertainty
-simple interface for canned queries -- most analyses only use a couple widgets or things, don't need to over design
-emphasize getting data out and not visualization (except for maybe the top couple use cases)
-standalone, not tied to ecosystem
-data-lite -- should be easy to import, skeletons and synapses, etc
-schema-less but probably not as sophisticated as connectomeexplorer model, lot smpler
-allow for incremental update through interface that models proofreading actions
-neo4j is just easier


cool add-ons:

-neo4j can log queries and metadata can be associated -- that might be sufficient -- might be able to set permission for users to a particular function on the server

-show visual documentation for graph model

-record queries that people make; maybe keep stats and show distribution of query types made (don't show dev queries)

-allow some basic plotting/histogram options in addition to basic table and export?

-allow user to submit question on query they want to do -- basically for help (snack bar to show message sent?); allow user to submit a custom query for inclusion

-form to create and save a custom query -- dedicated server?




documentation and theory:

-add more information to PPT; clean up errors or changes; add property nodes?
-how to handle multi-tenancy -- just use labels and maybe auto-inject from webpage -- this will still slow down queries but maybe not so bad -- synapses and neurons are the only ones that probably need labels -- it is kinda like an ROI type
-denoralizations: skeleton is really just adding more info on neuron -- could be out of sync with neuron if not careful; synapse summary per ROI is duplicate of synapse set -- those can be out of sync if not careful





